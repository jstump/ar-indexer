module ARIndexer

  # Simple class for searching the index generated by adding has_reverse_index to ActiveRecord models
  # 
  # === Initialization
  # 
  #   foo = IndexSearch.new(Article, {:no_results_message => "We're sorry, but no results were found"})
  # 
  # === Parameters
  # 
  # * [model_names]: array of constants denoting the ActiveRecord models to search
  # * opts: optional hash of configuration options
  # 
  # === Options
  # 
  # :no_results_message => string which can be requested and displayed if no results are found

  class IndexSearch

    def initialize(model_names, opts = {})
      @models = {}
      model_names.each do |model|
        @models[model.to_s.split('::').last] = model
      end
      puts @models

      @options = {
        :no_results_message => "Your #{@model_name} search returned no results."
      }

      @options.merge!(opts)
    end

    # Returns either the default :no_results_message, or the one specified on initialization
    # 
    # ==== Returns
    # 
    # string

    def no_results_message
      return @options[:no_results_message]
    end

    # Runs a text search against the ReverseIndex model for a given ActiveRecord model and search string.
    # Returns 
    # 
    # ==== Parameters
    # 
    # * search_string: string on which to search for indexed objects
    # 
    # ==== Returns
    # 
    # array of ActiveRecord objects, or an empty array
    # 
    # ==== Examples
    # 
    #   foo = IndexSearch.new(Article)
    #   foo.run_search("test string")
    #   #=> [<#Article>, <#Article>, ...]

    def run_search(search_string)
      search_terms = Indexer.expand_lexicon(Indexer.text_to_lexicon(search_string))
      matches = {}
      @models.keys.each do |model|
        matches[model] = {}
      end
      search_terms.each do |st|
        reverse_index_records = ReverseIndex.where(:model_name => [@models.keys], :word => st)
        if reverse_index_records.count > 0
          reverse_index_records.each do |rir|
            rir.retrieve_id_array.each do |id|
              if matches[rir.model_name].has_key?(id)
                matches[rir.model_name][id] = matches[rir.model_name][id] + 1
              else
                matches[rir.model_name][id] = 1
              end
            end
          end
        end
      end
      collected_matches = []
      matches.each do |k,v|
        unless v.empty?
          collected_matches << v.to_a.map{|x| x << k}
        end
      end
      unless collected_matches.empty?
        collected_matches.flatten!(1)
        objects_to_return = []
        collected_matches.sort{|x,y| x[1] <=> y[1]}.reverse.each do |match|
          objects_to_return << @models[match[2]].find(match[0])
        end
        return objects_to_return
      else
        return []
      end
    end

  end

end
